package com.example.myapp;

import static com.codename1.ui.CN.*;
import com.codename1.system.Lifecycle;
import com.codename1.ui.*;
import com.codename1.ui.layouts.*;
import com.codename1.io.*;
import com.codename1.ui.plaf.*;
import com.codename1.ui.util.Resources;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.Objects;


/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */
public class MyApp extends Lifecycle {

    String CityOri = null;
    String CountryOri = null;
    String DepartureDate = null;
    String ReturnDate = null;
    String CodeOri = null;
    String finalDests[] = new String[30];
    String finalCodes[] = new String[30];
    String finalImages[] = new String[30];
    int finalHotels[] = new int[30];
    int finalPrices[] = new int[30];
    int x = 0;
    String[] EUdests = { "it", "at","be", "fr", "de", "gr", "no", "es", "se", "ch", "tr"};
    String[] AFdests = {"eg","ma", "za"};
    String[] NAdests = {"ca","us", "mx"};
    String[] ASdests = { "cn", "in","jp", "sg"};
    String[] SAdests = {"ar","br", "cl","cr"};
    String[] CRdests = {"aw","bs", "bb","bm"};



    public void runApp() {
        Form hi = new Form("Hi World", BoxLayout.y());
        TextField CityBox = new TextField("", "City of Origin", 20, TextArea.ANY);
        TextField CountryBox = new TextField("", "County of Origin", 20, TextArea.ANY);
        TextField DepartureBox = new TextField("", "YYYY-MM-DD", 20, TextArea.ANY);
        TextField ReturnBox = new TextField("", "YYYY-MM-DD", 20, TextArea.ANY);
        Button searchButton = new Button("Search");
        hi.add("City of Origin").add(CityBox);
        hi.add("Country of Origin").add(CountryBox);
        hi.add("Departure Date").add(DepartureBox);
        hi.add("Return Date").add(ReturnBox);
        hi.add(searchButton);
        hi.show();

        Form Continents = new Form("Continents", BoxLayout.y());
        Button Europe = new Button("Europe");
        Button Africa = new Button("Africa");
        Button Asia = new Button("Asia");
        Button NorthAmerica = new Button("North America");
        Button SouthAmerica = new Button("South America");
        Button CaribCA = new Button("Caribean and Central America");
        Continents.add(Europe);
        Continents.add(Africa);
        Continents.add(Asia);
        Continents.add(NorthAmerica);
        Continents.add(SouthAmerica);
        Continents.add(CaribCA);

        searchButton.addActionListener(e -> Continents.show());
        searchButton.addActionListener(e -> CityOri = CityBox.getText());
        searchButton.addActionListener(e -> CountryOri = CountryBox.getText());
        searchButton.addActionListener(e -> DepartureDate = DepartureBox.getText());
        searchButton.addActionListener(e -> ReturnDate = ReturnBox.getText());
        hi.getToolbar().addMaterialCommandToSideMenu("Search Command", FontImage.MATERIAL_CHECK, 4, e -> Continents.show());

        Europe.addActionListener(e -> search("EU"));
        Africa.addActionListener(e -> search("AF"));
        Asia.addActionListener(e -> search("AS"));
        NorthAmerica.addActionListener(e -> search("NA"));
        SouthAmerica.addActionListener(e -> search("SA"));
        CaribCA.addActionListener(e -> search("CR"));
    }

    public void search(String Continent) {
        FindCode(CountryOri, CityOri, CodeOri);
        if(Continent == "EU"){
            for (int i = 0; i < EUdests.length; i++) {
                FindDests(EUdests[i], CodeOri, DepartureDate);
                TripPage();
            }
        }else if(Continent == "AF"){
            for (int i = 0; i < AFdests.length; i++) {
                FindDests(AFdests[i], CodeOri, DepartureDate);
                TripPage();
            }
        }else if(Continent == "AS"){
            for (int i = 0; i < ASdests.length; i++) {
                FindDests(ASdests[i], CodeOri, DepartureDate);
                TripPage();
            }
        }else if(Continent == "NA"){
            for (int i = 0; i < NAdests.length; i++) {
                FindDests(NAdests[i], CodeOri, DepartureDate);
                TripPage();
            }
        }else if(Continent == "SA"){
            for (int i = 0; i < SAdests.length; i++) {
                FindDests(SAdests[i], CodeOri, DepartureDate);
                TripPage();
            }
        }else if(Continent == "CR"){
            for (int i = 0; i < CRdests.length; i++) {
                FindDests(CRdests[i], CodeOri, DepartureDate);
                TripPage();
            }
        }
    }

    public void TripPage(){
        Form TripPage = new Form("Locations", BoxLayout.y());
        for (int i = 0; i < x; i++) {
            String Name = String.valueOf(i);
            Button Name = new Button (finalDests[i]);
            TripPage.add(Name);
            Name.addActionListener(e -> Details(Name));
        }

        TripPage.show();
    }

    public void Details(String Destination){
        Form FinalDest = new Form("Your Destination", BoxLayout.y());

    }

    public void FindCode (String Country, String City, String out){

        try {
            String code = null;
            HttpRequest request2 = HttpRequest.newBuilder()
                    .uri(URI.create("https://api.flightstats.com/flex/airports/rest/v1/json/countryCode/" + Country + "?appId=07f64f97&appKey=c7cea02eb40d5e2e9cecebc426515c32"))
                    .build();
            HttpResponse<String> response2 = HttpClient.newHttpClient().send(request2, HttpResponse.BodyHandlers.ofString());
            JSONObject obj2 = new JSONObject(response2.body());
            JSONArray arr2 = obj2.getJSONArray("airports");
            for (int i = 0; i < arr2.length(); i++) {
                String loc = arr2.getJSONObject(i).getString("city");
                if (Objects.equals(City, loc)){
                    code = arr2.getJSONObject(i).getString("cityCode");
                }
            }
            out = code;
        } catch (Exception ex){

        }

    }

    public void FindDests (String Destination, String CodeOri, String DepartureDate){

        try{
            String countDest = null;
            String code = null;
            int countPrice = 999999;
            String URL = "https://skyscanner44.p.rapidapi.com/fly-to-country?destination=" + Destination + "&origin=" + CodeOri + "&departureDate=" + DepartureDate + "0&currency=USD&locale=en-GB&country=UK";
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(URL))
                    .header("content-type", "application/octet-stream")
                    .header("X-RapidAPI-Key", "5a0e8c94a4msh655d4f3fd30e085p165896jsn18e640f318ea")
                    .header("X-RapidAPI-Host", "skyscanner44.p.rapidapi.com")
                    .method("GET", HttpRequest.BodyPublishers.noBody())
                    .build();
            HttpResponse<String> response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString());
            JSONObject obj = new JSONObject(response.body());
            JSONArray arr = obj.getJSONArray("PlacePrices");
            System.out.println(arr);
            for (int i = 0; i < arr.length(); i++) {
                //System.out.println("0");
                String data = String.valueOf(arr.getJSONObject(i));
                String location = arr.getJSONObject(i).getString("Name");
                if(data.contains("DirectPrice")) {
                    //System.out.println("1");
                    int price = arr.getJSONObject(i).getInt("DirectPrice");
                    if (price != 0) {
                        if (price < countPrice) {
                            countPrice = price;
                            countDest = location;
                        }
                    }
                } else if (data.contains("IndirectPrice")) {
                    //System.out.println("2");
                    int price = arr.getJSONObject(i).getInt("IndirectPrice");
                    //System.out.println(price);
                    if (price != 0) {
                        if (price < countPrice) {
                            countPrice = price;
                            countDest = location;
                        }
                    }
                }
            }
            if(countDest != null) {
                FindCode(Destination,countDest,code);
                finalPrices[x] = countPrice;
                finalDests[x] = countDest;
                finalCodes[x]=code;
                finalImages[x]=image;
                finalHotels[x]=hotel;
                x++;
            }
        }catch(Exception ex){

        }

    }
}


